#include<iostream>
#include<queue>
using namespace std;

/*
使用队列实现栈的下列操作：

push(x) -- 元素 x 入栈
pop() -- 移除栈顶元素
top() -- 获取栈顶元素
empty() -- 返回栈是否为空
注意:

你只能使用队列的基本操作-- 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。
你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。
你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。
*/

class MyStack {
public:
	queue<int> que;

	void push(int x) {
		que.push(x);
	}

	void pop() {
		int n = que.size() - 1;
		while (n--) {
			que.push(que.front());
			que.pop();
		}
		que.pop();
	}

	int top() {
		int n = que.size() - 1;
		while (n--) {
			que.push(que.front());
			que.pop();
		}
		int res = que.front();
		que.push(res);
		que.pop();
		return res;
	}

	bool empty() {
		return que.empty();
	}
};

int main() {
	Mystack st;
	st.push(1);
	st.push(2);
	cout << st.top() << endl;
	st.pop();   // 注意弹出的操作
	cout << st.top() << endl;
	st.push(3);
	st.push(4);
	cout << st.top() << endl;
	st.pop();  // 注意弹出的操作    
	st.pop();
	st.pop();
	st.empty();
}